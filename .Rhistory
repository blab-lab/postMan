setwd("/Volumes/smng/experiments/simonSingleWord/acousticdata")
setwd("/Volumes/smng/experiments/simonSingleWord/acousticdata")
statTable <-read.csv("statTable_20s.txt")
library(effectsize)
library(multcomp)
library(multcomp)
library(effectsize)
proj.table <- statTable[ which(statTable$formant=='projection'),]
proj.aov = aov(fVal~vowel*phase+Error(subj),proj.table)
summary(proj.aov)
f1diff.tTest = t.test(f1diff.adapt,f1diff.washout,paired=TRUE)
f1diff.adapt = abs(V1.F1.table$fVal[which(V1.F1.table$phase=='adapt')]-V2.F1.table$fVal[which(V1.F1.table$phase=='adapt')])
f1diff.washout = abs(V1.F1.table$fVal[which(V1.F1.table$phase=='washout')]-V2.F1.table$fVal[which(V1.F1.table$phase=='washout')])
f2diff.adapt = abs(V1.F2.table$fVal[which(V1.F2.table$phase=='adapt')]-V2.F2.table$fVal[which(V1.F2.table$phase=='adapt')])
f2diff.washout = abs(V1.F2.table$fVal[which(V1.F2.table$phase=='washout')]-V2.F2.table$fVal[which(V1.F2.table$phase=='washout')])
#subset each measurement
f1.table <- statTable[ which(statTable$formant=='f1'),]
f2.table <- statTable[ which(statTable$formant=='f2'),]
proj.table <- statTable[ which(statTable$formant=='projection'),]
V1.F1.table <- statTable[ which(statTable$vowel=='V1' & statTable$formant=='f1'),]
V2.F1.table <- statTable[ which(statTable$vowel=='V2' & statTable$formant=='f1'),]
V1.F2.table <- statTable[ which(statTable$vowel=='V1' & statTable$formant=='f2'),]
V2.F2.table <- statTable[ which(statTable$vowel=='V2' & statTable$formant=='f2'),]
#subset data for summary statistics
V1.F1.adapt <- statTable[ which(statTable$vowel=='V1' & statTable$formant=='f1' & statTable$phase=='adapt'),1]
V1.F2.adapt <- statTable[ which(statTable$vowel=='V1' & statTable$formant=='f2' & statTable$phase=='adapt'),1]
V1.proj.adapt <- statTable[ which(statTable$vowel=='V1' & statTable$formant=='projection' & statTable$phase=='adapt'),1]
V1.F1.washout <- statTable[ which(statTable$vowel=='V1' & statTable$formant=='f1' & statTable$phase=='washout'),1]
V1.F2.washout <- statTable[ which(statTable$vowel=='V1' & statTable$formant=='f2' & statTable$phase=='washout'),1]
V1.proj.washout <- statTable[ which(statTable$vowel=='V1' & statTable$formant=='projection' & statTable$phase=='washout'),1]
V2.F1.adapt <- statTable[ which(statTable$vowel=='V2' & statTable$formant=='f1' & statTable$phase=='adapt'),1]
V2.F2.adapt <- statTable[ which(statTable$vowel=='V2' & statTable$formant=='f2' & statTable$phase=='adapt'),1]
V2.proj.adapt <- statTable[ which(statTable$vowel=='V2' & statTable$formant=='projection' & statTable$phase=='adapt'),1]
V2.F1.washout <- statTable[ which(statTable$vowel=='V2' & statTable$formant=='f1' & statTable$phase=='washout'),1]
V2.F2.washout <- statTable[ which(statTable$vowel=='V2' & statTable$formant=='f2' & statTable$phase=='washout'),1]
V2.proj.washout <- statTable[ which(statTable$vowel=='V2' & statTable$formant=='projection' & statTable$phase=='washout'),1]
f1diff.adapt = abs(V1.F1.table$fVal[which(V1.F1.table$phase=='adapt')]-V2.F1.table$fVal[which(V1.F1.table$phase=='adapt')])
f1diff.washout = abs(V1.F1.table$fVal[which(V1.F1.table$phase=='washout')]-V2.F1.table$fVal[which(V1.F1.table$phase=='washout')])
f2diff.adapt = abs(V1.F2.table$fVal[which(V1.F2.table$phase=='adapt')]-V2.F2.table$fVal[which(V1.F2.table$phase=='adapt')])
f2diff.washout = abs(V1.F2.table$fVal[which(V1.F2.table$phase=='washout')]-V2.F2.table$fVal[which(V1.F2.table$phase=='washout')])
proj.aov = aov(fVal~vowel*phase*shift+Error(subj),proj.table)
summary(proj.aov)
f1diff.tTest = t.test(f1diff.adapt,f1diff.washout,paired=TRUE)
summary(f1diff.tTest)
f1diff.adapt
f1diff.tTest
t.test(f1diff.adapt,0,paired=TRUE)
t.test(f1diff.adapt)
hedges_g(f1diff.adapt
)
t.test(f2diff.adapt)
hedges_g(f2diff.adapt)
cor.test(V1.proj.adapt,V1.proj.washout)
cor.test(V1.proj.adapt,V2.proj.adapt)
install.packages(c("BayesFactor", "circular", "RcppArmadillo", "rlang", "sass", "shiny", "zoo"))
install.packages(c("BayesFactor", "circular", "RcppArmadillo", "rlang", "sass", "shiny", "zoo"))
install.packages(c("BayesFactor", "circular", "RcppArmadillo", "rlang", "sass", "shiny", "zoo"))
install.packages(c("BayesFactor", "circular", "RcppArmadillo", "rlang", "sass", "shiny", "zoo"))
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages(c("BayesFactor", "circular", "RcppArmadillo", "rlang", "sass", "shiny", "zoo"))
install.packages(c("BayesFactor", "circular", "RcppArmadillo", "rlang", "sass", "shiny", "zoo"))
install.packages(c("BayesFactor", "circular", "RcppArmadillo", "rlang", "sass", "shiny", "zoo"))
install.packages(c("BayesFactor", "circular", "RcppArmadillo", "rlang", "sass", "shiny", "zoo"))
detach("package:coda", unload = TRUE)
detach("package:BayesFactor", unload = TRUE)
install.packages(c("BayesFactor", "circular", "RcppArmadillo", "rlang", "sass", "shiny", "zoo"))
install.packages(c("BayesFactor", "circular", "RcppArmadillo", "rlang", "sass", "shiny", "zoo"))
install.packages(c("BayesFactor", "circular", "RcppArmadillo", "rlang", "sass", "shiny", "zoo"))
install.packages(c("BayesFactor", "circular", "RcppArmadillo", "rlang", "sass", "shiny", "zoo"))
install.packages(c("BayesFactor", "circular", "RcppArmadillo", "rlang", "sass", "shiny", "zoo"))
install.packages("rlang")
library(dplyr)
setwd(/Users/Ben/Documents/MATLAB/postman)
setwd("/Users/Ben/Documents/MATLAB/postman")
trialTable <- read.csv("byTrial_4_23_21.csv")
trialTable$exp <- ifelse(trialTable$group == 'normal', 'normalfb', trialTable$exp)
trialTable <- trialTable %>%
filter(participant != 'OA14') %>%
filter(participant != 'HOC8')
library(dplyr)
library(vctrs, lib.loc = "/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
install.packages("vctrs")
install.packages("vctrs")
install.packages("vctrs")
install.packages("BayesFactor")
install.packages("BayesFactor")
install.packages("BayesFactor")
